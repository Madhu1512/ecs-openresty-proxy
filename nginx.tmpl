# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";

server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 80;
        access_log /var/log/nginx/access.log vhost;
	    return 503;
}

{{ range $name, $container := . }}
upstream {{ $name }} {
    {{ range $_, $value := $container }}
         server {{ $value.Address }}:{{ $value.Port }};
    {{ end }}
         keepalive 15;
}

server {
        server_name {{ (index $container 0).Host }};
{{ range $_, $value := $container -}}
{{ range $key, $value := $value.Env -}}
    {{ if (eq (index (split $key "_GEN_") 0) "NGINX") }}
        {{ replace $key "NGINX_GEN_" "" 1 }} {{ $value }};
    {{- end }}
    {{ if (eq (index (split $key "_SESSION_") 0) "NGINX") }}
        {{ replace $key "NGINX_SESSION_" "" 1 }} {{ $value }};
    {{- end }}
{{- end }}
        listen 80;
        access_log /var/log/nginx/access.log vhost;
        location / {
            {{ range $key, $value := $value.Env -}}
            {{ if (eq (index (split $key "_OIDC_") 0) "NGINX") }}
            access_by_lua '
                local opts = {
                    {{ replace $key "NGINX_OIDC_" "" 1 }}={{ $value }};
                }
                -- call authenticate for OpenID Connect user authentication
                local res, err = require("resty.openidc").authenticate(opts)

                if err then
                    ngx.status = 500
                    ngx.say("There was an error while logging in: " .. err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                ngx.req.set_header("X-Forwarded-User", res.id_token.sub:lower())
            ';
             {{- end }}
             {{ if (eq (index (split $key "_HDR_") 0) "NGINX") }}
             proxy_set_header {{ replace $key "NGINX_HDR_" "" 1 }} {{ $value }};
             {{- end }}
             {{- end }}
             proxy_set_header Connection "Keep-Alive";
             proxy_set_header Proxy-Connection "Keep-Alive";
             proxy_pass http://{{ $name }};
             proxy_intercept_errors on;
             error_page 500 503 504 /50x.html;
        }
        location = /50x.html { 
            root /usr/local/openresty/nginx/html/;
        }
}
{{- end }}
{{ end }}
